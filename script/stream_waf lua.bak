--[[进行所有规则的匹配，方便进行后续操作]]
local logRecord = require('LogRecord')
local ReqUtil = require('ReqUtils')
local json = require('cjson')
local logPath = './intercept_logs'
local _M = {}
local systemInfo = nil

-- 检测ip黑名单
function _M.check_black_ip()
    local redis = require 'redisHelper'
    local reqIp = ReqUtil.tcpGetIp()
    ngx.log(ngx.DEBUG, 'reqIp:' .. reqIp)

    redis.Init()
    local data = redis.get('data')
    redis.Close()
    local dataJ = json.decode(data)
    systemInfo = dataJ['system_info']
    local blackTable = dataJ['black_ip']
    -- systemInfo = redis.get('system_info')
    -- local blackIp = redis.get('black_ip')
    -- local blackTable = json.decode(blackIp)
    for i, rule in pairs(blackTable) do
        for k, v in pairs(rule) do
            -- local _, _, _ = SetShared(key, Json.encode(v), 0)
            if reqIp == k then
                local port = ngx.var.server_port
                ngx.log(ngx.DEBUG, port)
                if v == nil or v['state'] == 'off' then
                    ngx.log(ngx.DEBUG, '允许的ip')
                    return false
                else
                    ngx.log(ngx.DEBUG, '黑名单的ip')
                    -- 记录日志
                    -- logRecord.log_record(logPath, ngx.var.request_uri, '_', 'blackIp')
                    -- ngx.log(ngx.DEBUG, '保存日志成功')
                    return true
                end
            end
        end
    end
end

--http根据端口获取系统信息
function _M.getSystemInfoByPort(isBlack)
    local server_port = ngx.var.server_port
    local system_tmp = systemInfo
    -- local system_info = json.decode(system_tmp)
    for _, v in pairs(system_tmp) do
        for _, system in pairs(v) do
            if server_port == system['port'] then
                if isBlack then
                    ngx.log(ngx.DEBUG, '访问的目标ip:' .. system['innormal_server'])
                    ngx.var.targetIp = system['innormal_server']
                    ngx.var.targetPort = system['innormal_port']
                else
                    ngx.log(ngx.DEBUG, '访问的目标ip:' .. system['normal_server'])
                    ngx.var.targetIp = system['normal_server']
                    ngx.var.targetPort = system['normal_port']
                end
            end
        end
    end
end

-- 总的检查入口
function _M.check()
    -- 检测黑名单ip,运行相应的脚本
    local isBlackIp = _M.check_black_ip()
    _M.getSystemInfoByPort(isBlackIp)
end

return _M
